<?php

/**
 * @file
 * 
 */

function multivalue_settings_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  dpm('in field_attach_form');
  dpm('entity_type');
  dpm($entity_type);
  dpm('entity');
  dpm($entity);
  dpm('form');
  dpm($form);
  dpm('form_state');
  dpm($form_state);
  
  // get the fields for this bundle
  $fields = field_info_instances($form['#entity_type'], $form['#bundle']);
  dpm('fields:');
  dpm($fields);
  
  // iterate over the fields
  foreach ($fields as $field) {
    $field_name = $field['field_name'];
    $field_info = field_info_field($field_name);
    dpm('field_info:');
    dpm($field_info);
    // check whether they need to be altered by Multivalue Settings
    if (!isset($field_info['settings']['multivalue_settings'])) continue;
    else $settings = $field_info['settings']['multivalue_settings'];
    // field modifications
    dpm('settings:');
    dpm($settings);
    $allowed = $settings['allowed'];
    $required = $settings['required'];
    $initial = $settings['initial'];
    $extra = $settings['extra'];
    // find the number of values the field already has
    $value_num = $form_state['field'][$field_name][$langcode]['items_count'];
    if ($value_num > 0) {
      $values = $entity->$field_name;
      $values = $values[$langcode];
    }
    dpm("field has $value_num values");
    // set it up accordingly
    //$form_state['field'][$field_name][$langcode]['instance']['required'] = 1;
    $element = &$form[$field_name][$langcode];
    if ($allowed == 1) {
      dpm('allowed is 1');
      dpm("required is $required");
      //$form[$field_name][$langcode]['#required'] = 1;
      //$form[$field_name][$langcode][0]['#required'] = TRUE;
      $form[$field_name][$langcode][0]['value']['#required'] = $required;
    } else {
      
    }
    dpm('form');
    dpm($form);
    dpm('form_state');
    dpm($form_state);
    //$element_num = count($element)
  }
}

/*function multivalue_settings_field_widget_form_alter(&$element, &$form_state, $context) {
  dpm('in widget alter');
  dpm($context);
  // check if this field needs to be altered
  if (!isset($context['field']['settings']['multivalue_settings'])) return;
  dpm('this field needs to be altered');
  dpm($element);
  dpm($context);
} */
 
function multivalue_settings_form_alter(&$form, $form_state, $form_id) {
  dpm($form_id);
  dpm('form:');
  dpm($form);
} 

 /**
  * Implements hook_form_FORM_ID_alter().
  * Adds the settings to the Field Settings form
  */
function multivalue_settings_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  //dpm($form);
  // change the regular multiple values form element
  unset($form['field']['cardinality']);
  $form['field']['cardinality'] = array(
    '#type'   => 'value',
    '#value'  => NULL,
  );
  
  // add a submit handler for this form
  $form['#validate'][] = 'multivalue_settings_validate_settings';
  
  // create the new settings form elements
  $allowed_max = 100;
  $initial_max = 30;
  $extra_max = 10;
  $allowed = $allowed_max;
  // check if there is already a number of allowed values in form_state (which
  // means this is running from an AJAX call) or otherwise, if there is a value
  // that has been previously selected in this form
  if (!empty($form_state['values']['field']['settings']['multivalue_settings']['allowed'])) {
    $allowed = $form_state['values']['field']['settings']['multivalue_settings']['allowed'];
  }
  elseif (!empty($form['#field']['settings']['multivalue_settings']['allowed'])) {
    $allowed = $form['#field']['settings']['multivalue_settings']['allowed'];
  }
  // the fieldset
  $form['field']['settings']['multivalue_settings'] = array(
    '#type'   => 'fieldset',
    '#title'  => 'Multivalue Settings',
  );
  
  // number of allowed values
  $options = array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + drupal_map_assoc(range(1, $allowed_max));
  $form['field']['settings']['multivalue_settings']['allowed'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of values allowed'),
    '#default_value'  => $form['#field']['settings']['multivalue_settings']['allowed'],
    '#description'    => t('This is the maximum number of values this field may have'),
    '#options'    => $options,
    '#ajax'       => array(
      'callback'  => 'multivalue_settings_required_callback',
      'wrapper'   => 'multivalue-settings-wrapper',
    ),
  );
  
  // number of required values
  $options = array('0' => t('None'));
  if ($allowed != -1) $options += drupal_map_assoc(range(1, $allowed));
  else $options += drupal_map_assoc(range(1, $allowed_max));
  $form['field']['settings']['multivalue_settings']['required'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of values required'),
    '#default_value'  => $form['#field']['settings']['multivalue_settings']['required'],
    '#description'    => t('This is the minimum number of values this field is required to have'),
    '#options'    => $options,
    '#prefix'     => '<div id="multivalue-settings-wrapper">',
  );
  
  // number of values to show initially
  if ($allowed != -1) $options = drupal_map_assoc(range(1, min($allowed, $initial_max)));
  else $options = drupal_map_assoc(range(1, $initial_max));
  $form['field']['settings']['multivalue_settings']['initial'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of initial fields'),
    '#default_value'  => $form['#field']['settings']['multivalue_settings']['initial'],
    '#description'    => t('This is the number of field instances to show if no values are saved to this field yet'),
    '#options'    => $options,
  );
  
  // number of extra empty fields to show on edit
  $options = array('0' => t('None'));
  if ($allowed != -1) {
    $options += array('-1' => t('All remaining allowed fields'));
    $options += drupal_map_assoc(range(1, min($allowed - 1, $extra_max)));
  }
  else $options += drupal_map_assoc(range(1, $extra_max));
  $form['field']['settings']['multivalue_settings']['extra'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of extra empty fields'),
    '#default_value'  => $form['#field']['settings']['multivalue_settings']['extra'],
    '#description'    => t('This is the maximum number of extra empty field instances to show when the field already has some values'),
    '#options'    => $options,
    '#suffix'     => '</div>',
  ); 
}

function multivalue_settings_required_callback($form, &$form_state) {
  $return = array('required' => $form['field']['settings']['multivalue_settings']['required'],
                  'initial' => $form['field']['settings']['multivalue_settings']['initial'],
                  'extra' => $form['field']['settings']['multivalue_settings']['extra'],
            );
  //dpm($return);
  return $return;
}

function multivalue_settings_validate_settings($form, &$form_state) {
  dpm('in submit function for settings');
  dpm($form_state['input']);
  dpm($form_state['values']);
  // fix cardinality
  $settings = $form_state['values']['field']['settings']['multivalue_settings'];
  if ($settings['allowed'] == 1) {
    $form_state['values']['field']['cardinality'] = max($settings['required'], $settings['allowed']);
  } else $form_state['values']['field']['cardinality'] = FIELD_CARDINALITY_UNLIMITED;
}