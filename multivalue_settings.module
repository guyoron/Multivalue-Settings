<?php

/**
 * @file
 * 
 */

/**
 * Implements field_attach_form().
 * 
 */
function multivalue_settings_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  //dpm('in field_attach_form');
  //dpm('entity_type');
  //dpm($entity_type);
  //dpm('entity');
  //dpm($entity);
  //dpm('form');
  //dpm($form);
  //dpm('form_state');
  //dpm($form_state);
  
  // chceck if we are in an ajax callback
  if (isset($form_state['triggering_element'])) {
    $ajax = TRUE;
  } else $ajax = FALSE;
  
  // get the fields on this form
  $fields = $form_state['field'];
  //dpm('fields:');
  //dpm($fields);
  
  // iterate over the fields
  foreach ($fields as $field_name => $field) {
    // check whether they need to be altered by Multivalue Settings
    if (!isset($field[$langcode]['field']['settings']['multivalue_settings']) ||
        $field[$langcode]['field']['settings']['multivalue_settings']['enable'] == 0) {
          continue;
    }
    else $settings = $field[$langcode]['field']['settings']['multivalue_settings'];
    // field modifications
    //dpm('settings:');
    //dpm($settings);
    $allowed = $settings['allowed'];
    $required = $settings['required'];
    $initial = $settings['initial'];
    $extra = $settings['extra'];
    // find the number of values the field already has
    $value_num = $form_state['field'][$field_name][$langcode]['items_count'];
    if ($value_num > 0) {
      $values = $entity->$field_name;
      $values = $values[$langcode];
    }
    //dpm("field has $value_num values");
    // set it up accordingly
    //$form_state['field'][$field_name][$langcode]['instance']['required'] = 1;
    $element = &$form[$field_name][$langcode];
      //$form[$field_name][$langcode][0]['value']['#required'] = $required;

    //dpm('element');
    //dpm($element);

    $element_num = $element['#max_delta'] + 1;
    //dpm("element has $element_num fields");
    
    $extra_num = $element_num - $value_num;
    
    if ($extra == -1) {
      $extra = $allowed - $value_num;
    }
    
    if (!$ajax) {
      // if there are no values in the field, we want to show $initial fields
      if ($value_num == 0) {
        if ($element_num != $initial) {
          $sample_field = $element[0];
          foreach (range(0, max($element_num - 1, $initial - 1)) as $i) {
            if ($i < $initial) {
              $element[$i] = multivalue_settings_increment_element($sample_field, $i);
              $element['#max_delta'] = $i;
              $element['#prefix'] = '<div id="field-test-add-more-wrapper' . '--' . $i . '">';
              $element['add_more']['#ajax']['wrapper'] = 'field-test-add-more-wrapper' . '--' . $i;
              // update the item count. Necessary for add_more ajax to work
              $form_state['field'][$field_name][$langcode]['items_count'] = $i;
            }
            else unset($element[$i]);
          }
        }
      }
      elseif ($element_num > $allowed) {
        $diff_num = $allowed - $element_num;
        if ($diff_num > $extra_num) {
          drupal_set_message('oops! something is wrong!', 'warning');
          return;
        }
        else {
          $max_delta = $element['#max_delta'];
          foreach (range($max_delta, $max_delta - $diff_num + 1) as $delta) {
            unset($element[$delta]);
            $i = $delta - 1;
            $element['#max_delta'] = $i;
            $element['#prefix'] = '<div id="field-test-add-more-wrapper' . '--' . $i . '">';
            $element['add_more']['#ajax']['wrapper'] = 'field-test-add-more-wrapper' . '--' . $i ;
            $form_state['field'][$field_name][$langcode]['items_count'] = $i;
          }
        }
      } 
      elseif ($extra_num != $extra) {
        if ($extra_num > $extra) {
          $diff = $extra_num - $extra;
          $max_delta = $element['#max_delta'];
          foreach (range($max_delta, $max_delta - $diff + 1) as $delta) {
            unset($element[$delta]);
            $i = $delta - 1;
            $element['#max_delta'] = $i;
            $element['#prefix'] = '<div id="field-test-add-more-wrapper' . '--' . $i . '">';
            $element['add_more']['#ajax']['wrapper'] = 'field-test-add-more-wrapper' . '--' . $i ;
            $form_state['field'][$field_name][$langcode]['items_count'] = $i;
          }
        }
        if ($extra > $extra_num) {
          $diff = $extra - $extra_num;
          $max_delta = $element['#max_delta'];
          $sample_field = $element[$max_delta];
          foreach (range($max_delta + 1, $max_delta + $diff - 1) as $delta) {
            $element[$delta] = multivalue_settings_increment_element($sample_field, $delta);
            $element['#max_delta'] = $delta;
            $element['#prefix'] = '<div id="field-test-add-more-wrapper' . '--' . $delta . '">';
            $element['add_more']['#ajax']['wrapper'] = 'field-test-add-more-wrapper' . '--' . $delta;
            // update the item count. Necessary for add_more ajax to work
            $form_state['field'][$field_name][$langcode]['items_count'] = $delta + 1;
          }
        }
      }
    } // end if ($ajax)
    // remove add more button if necessary
    if ($element_num >= $allowed) {
      unset($element['add_more']);
    }
  }
}

function multivalue_settings_increment_element($element, $delta) {
  $element['#delta'] = $delta;
  $element['value']['#delta'] = $delta;
  $element['#weight'] = $delta;
  $element['value']['#weight'] = $delta;
  $element['_weight']['#delta'] = $delta;
  $element['_weight']['#default_value'] = $delta;
  return $element;
}

 /**
  * Implements hook_form_FORM_ID_alter().
  * Adds the settings to the Field Settings form
  */
function multivalue_settings_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  // change the regular multiple values form element to an internal value
  unset($form['field']['cardinality']);
  $form['field']['cardinality'] = array(
    '#type'   => 'value',
    '#value'  => NULL,
  );
  
  // add a validate handler for this form
  $form['#validate'][] = 'multivalue_settings_validate_settings';
  
  // create the new settings form elements
  $allowed_max = 100;
  $initial_max = 30;
  $extra_max = 10;
  $allowed = $allowed_max;
  /* check if there is already a number of allowed values in form_state (which
   * means this is running from an AJAX call) or otherwise, if there is a value
   * that has been previously selected in this form */
  if (!empty($form_state['values']['field']['settings']['multivalue_settings']['allowed'])) {
    $allowed = $form_state['values']['field']['settings']['multivalue_settings']['allowed'];
  }
  elseif (!empty($form['#field']['settings']['multivalue_settings']['allowed'])) {
    $allowed = $form['#field']['settings']['multivalue_settings']['allowed'];
  }
  
  // get default values
  $values = $form['#field']['settings']['multivalue_settings'];
  
  // the fieldset
  $form['field']['settings']['multivalue_settings'] = array(
    '#type'   => 'fieldset',
    '#title'  => 'Multivalue Settings',
  );
  
  // the checkbox to enable these settings and show the field
  $form['field']['settings']['multivalue_settings']['enable'] = array(
    '#type'   => 'checkbox',
    '#title'  => t('This field can contain more than one value'),
    '#default_value'  => $values['enable'],
  );
  
  // number of allowed values
  $options = array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + drupal_map_assoc(range(2, $allowed_max));
  $form['field']['settings']['multivalue_settings']['allowed'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of values allowed'),
    '#default_value'  => $values['allowed'],
    '#description'    => t('This is the maximum number of values this field may have'),
    '#options'    => $options,
    '#ajax'       => array(
      'callback'  => 'multivalue_settings_required_callback',
      'wrapper'   => 'multivalue-settings-wrapper',
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][multivalue_settings][enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  
  // number of required values
  $options = array('0' => t('None'));
  if ($allowed != -1) $options += drupal_map_assoc(range(1, $allowed));
  else $options += drupal_map_assoc(range(1, $allowed_max));
  $form['field']['settings']['multivalue_settings']['required'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of values required'),
    '#default_value'  => $values['required'],
    '#description'    => t('This is the minimum number of values this field is required to have'),
    '#options'    => $options,
    '#prefix'     => '<div id="multivalue-settings-wrapper">',
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][multivalue_settings][enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  
  // number of values to show initially
  if ($allowed != -1) $options = drupal_map_assoc(range(1, min($allowed, $initial_max)));
  else $options = drupal_map_assoc(range(1, $initial_max));
  $form['field']['settings']['multivalue_settings']['initial'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of initial fields'),
    '#default_value'  => $values['initial'],
    '#description'    => t('This is the number of field instances to show if no values are saved to this field yet'),
    '#options'    => $options,
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][multivalue_settings][enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  
  // number of extra empty fields to show on edit
  $options = array('0' => t('None'));
  if ($allowed != -1) {
    $options += array('-1' => t('Show full number of allowed fields'));
    $options += drupal_map_assoc(range(1, min($allowed - 1, $extra_max)));
  }
  else $options += drupal_map_assoc(range(1, $extra_max));
  $form['field']['settings']['multivalue_settings']['extra'] = array(
    '#type'       => 'select',
    '#title'      => t('Number of extra empty fields'),
    '#default_value'  => $values['extra'],
    '#description'    => t('This is the maximum number of extra empty field instances to show when the field already has some values'),
    '#options'    => $options,
    '#suffix'     => '</div>',
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][multivalue_settings][enable]"]' => array('checked' => TRUE),
      ),
    ),
  ); 
}

/**
 * 
 * 
 */
function multivalue_settings_required_callback($form, &$form_state) {
  $return = array('required' => $form['field']['settings']['multivalue_settings']['required'],
                  'initial' => $form['field']['settings']['multivalue_settings']['initial'],
                  'extra' => $form['field']['settings']['multivalue_settings']['extra'],
            );
  //dpm($return);
  return $return;
}

/**
 * 
 * 
 */
function multivalue_settings_validate_settings($form, &$form_state) {
  //dpm('in submit function for settings');
  //dpm($form_state['input']);
  //dpm($form_state['values']);
  // fix cardinality
  $settings = $form_state['values']['field']['settings']['multivalue_settings'];
  if ($settings['enable'] == 0) {
    $form_state['values']['field']['cardinality'] = 1;
  }
  else {
    // set cardinality always to 'Unlimited' so that we get the add more button
    $form_state['values']['field']['cardinality'] = FIELD_CARDINALITY_UNLIMITED;
  }
}